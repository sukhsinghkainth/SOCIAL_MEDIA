<%- include("./partials/header.ejs") %>

  <% function formatDate(date) { const options={ year: 'numeric' , month: 'long' , day: 'numeric' }; return new
    Date(date).toLocaleDateString(undefined, options); } %>
    <div class="w-full min-h-screen bg-zinc-900 text-white py-5  ">
      <div class="w-[100%] px-4 flex  justify-end ">
        <div class="icons -mt-2 flex gap-5 items-center">
          <i class="text-[1.8rem] ri-heart-3-line"></i>
          <i class="text-[1.8rem] ri-messenger-line"></i>
        </div>
      </div>
      <div class="posts parent mb-20">
        <% posts.forEach(function(post){ %>

          <div class="post mt-10  flex flex-col justify-center w-[30vw]   items-center mx-auto min-h-[80vh]"
            data-postid="<%= post.post_id %>">
            <div class="title px-4 flex items-center gap-2">
              <h6 class="text-xs opacity-30">
                <%= formatDate(new Date(post.timestamp)) %>
              </h6>
            </div>
            <div class="relative w-full h-full mt-4 bg-sky-100 overflow-hidden">
              <img data-postid="<%= post.post_id %>" class="postimg w-full h-full object-cover"
                src="/images/uploads/<%= post.IMAGE %>" alt="">
            </div>
            <div class="options w-full px-4 flex justify-between items-center text-[1.4rem]">
              <div class="flex gap-3 mt-2">

                <i class="heart ri-heart-3-line"></i>

                <i class="ri-chat-3-line comment-icon" data-postid="<%= post.post_id %>"></i>
              </div>

            </div>

            <input class="px-3 mt-2 hidden py-2 border-2 border-zinc-800 rounded-md block w-full bg-zinc-900"
              type="text" placeholder="enter your comment" name="comment">
            <input class="w-full hidden bg-blue-100 px-3 py-3 rounded-md mt-2 text-zinc-900" type="submit"
              value="submit your comment">


            <div class="flex flex-col w-full">
              <h3 class="likeval px-4 mt-2 text-sm leading-none tracking-tight">
                <%= post.LIKE_COUNT %> likes

              </h3>
  
              <div class=" flex flex-col w-full h-full">
                <h1 class="text-white font-light text-xl mt-2">
                  <span class="font-semibold pl-4 pr-2">
                    <%= post.username %>
                  </span>
                  <%= post.content_description %>
                </h1>              
              </div>
              <div class="comments pl-4 pr-2 mt-1 font-light opacity-50 overflow-y-auto max-h-20">
                <h4 class="text-white  font-light opacity-30">
                  Comments:
              </h4>
                <% if (post.comments && post.comments.length > 0) { %>
                    <% post.comments.forEach(function(comment) { %>
                        <p class="mb-1"><strong>
                          <%= comment.username %> <br>
                        </strong>
                          <%= comment.comment %>
                        </p>
                    <% }) %>
                <% } else { %>
                    <p>No comments yet.</p>
                <% } %>
            </div>

            </div>
          </div>
          <% })%>

      </div>
    </div>

    <script>

      document.querySelector(".parent")
        .addEventListener("click", function (dets) {
          if (dets.target.classList.contains("postimg")) {
            var post = dets.target.parentNode.parentNode;
            var heartwithborder = post.querySelector(".heart");
            if (heartwithborder.classList.contains("ri-heart-3-line")) {
              heartwithborder.classList.remove("ri-heart-3-line")
              heartwithborder.classList.add("ri-heart-3-fill")
              heartwithborder.classList.add("text-red-500")
              // heartwithborder.style.color = "red";
            }
            else {
              heartwithborder.classList.remove("ri-heart-3-fill")
              heartwithborder.classList.remove("text-red-500")
              heartwithborder.classList.add("ri-heart-3-line")
            }
            axios.get(`/like/${dets.target.dataset.postid}`).then((result) => {
              window.location.reload();
            }).catch((err) => {
              console.log(err)
            });


            // fetch(`/like/${dets.target.dataset.postid}`)
            // fetch(`/like/${dets.target.dataset.postid}`)
            // .then(raw => raw.json())
            // .then(response => {
            //   console.log(response.like.length);
            //   post.querySelector(".likeval").textContent = response.like.length + " likes"
            // })

            var icon = document.createElement("i");
            icon.classList.add("ri-heart-3-fill");
            icon.classList.add("text-red-700", "text-6xl", 'absolute', 'top-1/2', 'left-1/2', '-translate-x-[50%]', '-translate-y-[50%]', 'z-[9]');
            dets.target.parentNode.appendChild(icon);

            gsap.from(icon, {
              scale: .5,
              y: 30,
              opacity: 0,
              ease: Expo,
              duration: .3
            })

            gsap.to(icon, {
              scale: 0,
              y: -30,
              opacity: 0,
              duration: .3,
              ease: Expo,
              delay: .3,
              onComplete: () => {
                dets.target.parentNode.removeChild(icon);
              }
            })
          }
          //   else if (dets.target.classList.contains("save")) {
          //     var id = dets.target.dataset.postid;
          //     fetch(`/save/${id}`)
          //       .then(raw => raw.json())
          //       .then(result => {
          //         if (!dets.target.classList.contains("ri-bookmark-line")) {
          //           dets.target.classList.remove("ri-bookmark-fill", "text-zinc-100");
          //           dets.target.classList.add("ri-bookmark-line")
          //         }
          //         else {
          //           dets.target.classList.remove("ri-bookmark-line")
          //           dets.target.classList.add("ri-bookmark-fill", "text-zinc-100")
          //         }
          //       })
          //   }
        })



      document.querySelector(".parent").addEventListener("click", function (event) {
        // Check if the clicked element has the class 'comment-icon'
        if (event.target.classList.contains("comment-icon")) {
          // Get the parent post element
          var post = event.target.closest(".post");
          // Find the comment input and submit button within the post
          var commentInput = post.querySelector("input[name='comment']");
          var submitButton = post.querySelector("input[type='submit']");

          // Toggle the visibility of comment input and submit button
          if (commentInput.style.display === "none" || commentInput.style.display === "") {
            commentInput.style.display = "block";
            submitButton.style.display = "block";
          } else {
            commentInput.style.display = "none";
            submitButton.style.display = "none";
          }
        }
      });


      // Add event listener for submit button
      document.querySelectorAll("input[type='submit']").forEach(function (button) {
        button.addEventListener("click", function (event) {
          // Prevent the default form submission behavior
          event.preventDefault();

          // Get the parent post element
          var post = event.target.closest(".post");
          // Find the comment input within the post
          var commentInput = post.querySelector("input[name='comment']");

          // Extract the comment content
          var commentContent = commentInput.value.trim();

          // You can perform additional validation here if needed

          // Make a POST request to submit the comment content
          axios.post("/submit_comment", {
            postId: post.dataset.postid, // Assuming you have a data attribute 'data-postid' on the post element
            comment: commentContent
          })
            .then(function (response) {
              // Handle the response, maybe update the UI to show the new comment
              console.log("Comment submitted successfully:", response);
              // Clear the comment input field
              commentInput.value = "";
              // Hide the comment input and submit button
              commentInput.style.display = "none";
              event.target.style.display = "none";
            })
            .catch(function (error) {
              console.error("Error submitting comment:", error);
              // Handle errors, maybe show an error message to the user
            });
        });
      });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"
      integrity="sha512-7eHRwcbYkK4d9g/6tD/mhkf++eoTHwpNM9woBxtPUBWm67zeAfFC+HrdoE2GanKeocly/VxeLvIqwvCdk7qScg=="
      crossorigin="anonymous" referrerpolicy="no-referrer">
      </script>
    <script src="https://cdn.jsdelivr.net/npm/axios@1.6.7/dist/axios.min.js"></script>


    <%- include("./partials/footer.ejs") %>